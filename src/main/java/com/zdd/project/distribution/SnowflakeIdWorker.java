package com.zdd.project.distribution;

/**
 * Twitter_Snowflake<br>
 * SnowFlake?????(????-??):<br>
 * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>
 * 1??????long?????Java??????????????????0????1???id??????????0<br>
 * 41????(???)????41????????????????????????????????? - ?????)
 * ??????????????????????id???????????????????????????IdWorker??startTime????41??????????69???T = (1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69<br>
 * 10?????????????1024??????5?datacenterId?5?workerId<br>
 * 12???????????12????????????????(??????????)??4096?ID??<br>
 * ?????64?????Long??<br>
 * SnowFlake???????????????????????????????ID??(?????ID???ID???)????????????SnowFlake??????26?ID???
 */
public class SnowflakeIdWorker {
// ==============================Fields===========================================
  /** ????? (2015-01-01) */
  private final long twepoch = 1420041600000L;

  /** ??id????? */
  private final long workerIdBits = 5L;

  /** ????id????? */
  private final long datacenterIdBits = 5L;

  /** ???????id????31 (???????????????????????????????) */
  private final long maxWorkerId = -1L ^ (-1L << workerIdBits);

  /** ?????????id????31 */
  private final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);

  /** ???id????? */
  private final long sequenceBits = 12L;

  /** ??ID???12? */
  private final long workerIdShift = sequenceBits;

  /** ????id???17?(12+5) */
  private final long datacenterIdShift = sequenceBits + workerIdBits;

  /** ??????22?(5+5+12) */
  private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;

  /** ???????????4095 (0b111111111111=0xfff=4095) */
  private final long sequenceMask = -1L ^ (-1L << sequenceBits);

  /** ????ID(0~31) */
  private long workerId;

  /** ????ID(0~31) */
  private long datacenterId;

  /** ?????(0~4095) */
  private long sequence = 0L;

  /** ????ID???? */
  private long lastTimestamp = -1L;

  //==============================Constructors=====================================
  /**
   * ????
   * @param workerId ??ID (0~31)
   * @param datacenterId ????ID (0~31)
   */
  public SnowflakeIdWorker(long workerId, long datacenterId) {
    if (workerId > maxWorkerId || workerId < 0) {
      throw new IllegalArgumentException(String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
    }
    if (datacenterId > maxDatacenterId || datacenterId < 0) {
      throw new IllegalArgumentException(String.format("datacenter Id can't be greater than %d or less than 0", maxDatacenterId));
    }
    this.workerId = workerId;
    this.datacenterId = datacenterId;
  }

  // ==============================Methods==========================================
  /**
   * ?????ID (?????????)
   * @return SnowflakeId
   */
  public synchronized long nextId() {
    long timestamp = timeGen();

    //???????????ID??????????????????????????
    if (timestamp < lastTimestamp) {
      throw new RuntimeException(
              String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
    }

    //???????????????????
    if (lastTimestamp == timestamp) {
      sequence = (sequence + 1) & sequenceMask;
      //???????
      if (sequence == 0) {
        //????????,???????
        timestamp = tilNextMillis(lastTimestamp);
      }
    }
    //?????????????
    else {
      sequence = 0L;
    }

    //????ID????
    lastTimestamp = timestamp;

    //??????????????64??ID
    return ((timestamp - twepoch) << timestampLeftShift) //
            | (datacenterId << datacenterIdShift) //
            | (workerId << workerIdShift) //
            | sequence;
  }

  /**
   * ??????????????????
   * @param lastTimestamp ????ID????
   * @return ?????
   */
  protected long tilNextMillis(long lastTimestamp) {
    long timestamp = timeGen();
    while (timestamp <= lastTimestamp) {
      timestamp = timeGen();
    }
    return timestamp;
  }

  /**
   * ?????????????
   * @return ????(??)
   */
  protected long timeGen() {
    return System.currentTimeMillis();
  }

  //==============================Test=============================================
  /** ?? */
  public static void main(String[] args) {
    SnowflakeIdWorker idWorker = new SnowflakeIdWorker(0, 0);
    for (int i = 0; i < 1000; i++) {
      long id = idWorker.nextId();
//      System.out.println(Long.toBinaryString(id));
      System.out.println(id);
    }
  }
}
